{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/board/board.component.jsx","App.js","utils/data.js","utils/array.js","serviceWorker.js","index.js"],"names":["module","exports","Card","pairId","id","flipped","value","handleClick","onClick","className","Board","options","handleCardClick","numId","state","currentCard","temporaliyFlipped","props","temp","push","setState","identifier","flippedCards","this","map","option","index","key","includes","Component","cards","question","answer","forEach","a","i","length","j","Math","floor","random","shuffle","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2b94ccf9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./card.styles.scss\";\n\nconst Card = ({ pairId, id, flipped, value, handleClick }) => {\n  const onClick = flipped ? null : () => handleClick(id);\n  return (\n    <div\n      className={`m-1 col card ${flipped ? \"flipped\" : \"\"}`}\n      onClick={onClick}\n    >\n      <p className=\"\">{flipped ? value : \"\"}</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport Card from \"../card/card.component\";\n\nclass Board extends Component {\n  constructor({ options }) {\n    super();\n    this.state = {\n      currentCard: null,\n      flippedCards: [],\n      temporaliyFlipped: []\n    };\n  }\n\n  handleCardClick = numId => {\n    const { currentCard, temporaliyFlipped } = this.state;\n    const { options } = this.props;\n    if (currentCard == null) {\n      const temp = [...temporaliyFlipped];\n      temp.push(numId);\n      this.setState({ currentCard: numId, temporaliyFlipped: temp });\n    } else {\n      if (options[currentCard].identifier === options[numId].identifier) {\n        const flippedCards = [...this.state.flippedCards];\n        flippedCards.push(options[currentCard].identifier);\n        this.setState({ flippedCards });\n      }\n      // TODO: Animate this or something\n      const temp = [...temporaliyFlipped];\n      temp.push(numId);\n      this.setState({ temporaliyFlipped: temp });\n      //\n      this.setState({ currentCard: null, temporaliyFlipped: [] });\n    }\n  };\n\n  render() {\n    const { flippedCards, temporaliyFlipped } = this.state;\n    const { options } = this.props;\n    return (\n      <div className=\"board row\">\n        {options.map((option, index) => (\n          <Card\n            key={index}\n            id={index}\n            pairId={option.identifier}\n            value={option.value}\n            handleClick={this.handleCardClick}\n            flipped={\n              flippedCards.includes(option.identifier) ||\n              temporaliyFlipped.includes(index)\n            }\n          ></Card>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.scss\";\nimport Board from \"./components/board/board.component\";\nimport { shuffle } from \"./utils/array\";\nimport { data } from \"./utils/data\";\n\nconst options = data;\n\nlet cards = [];\noptions.forEach(option =>\n  cards.push(\n    { identifier: option.identifier, value: option.question },\n    { identifier: option.identifier, value: option.answer }\n  )\n);\ncards = shuffle(cards);\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <Board options={cards}></Board>\n    </div>\n  );\n}\n\nexport default App;\n","export const data = [\n  {\n    identifier: \"moprosoft\",\n    question:\n      \"Es un modelo para la mejora y evaluación de los procesos de desarrollo y mantenimiento de sistemas y productos de software\",\n    answer: \"Moprosoft - Modelo de Procesos para la Industria del Software\"\n  },\n  {\n    identifier: \"cmmi\",\n    question:\n      \"Es un modelo para la mejora y evaluación de procesos para el desarrollo, mantenimiento y operación de sistemas de software\",\n    answer: \"CMMI\"\n  },\n  {\n    identifier: \"tsp\",\n    question:\n      \"Guía a los equipos de ingeniería que están desarrollando productos intensivos en software. \",\n    answer: \"Team Software Process\"\n  },\n  {\n    identifier: \"estrategia\",\n    question:\n      \"Se realiza un diseño conceptual del producto, se realizan estimaciones iniciales, se realiza un plan de configuración del producto, se establecen riesgos.\",\n    answer: \"TSP - Estrategia\"\n  },\n  {\n    identifier: \"requerimientos\",\n    question:\n      \"Se analizan las necesidades del cliente y se entrevistan, se especifican los requerimientos, se hace inspección de los requerimientos, se diseña un plan de pruebas del sistema.\",\n    answer: \"TSP - Requerimientos\"\n  },\n  {\n    identifier: \"diseno\",\n    question:\n      \"Se crea un diseño de alto nivel, se especifica el diseño, se inspecciona el diseño, se desarrolla un plan de pruebas de integración.\",\n    answer: \"TSP - Diseño\"\n  },\n  {\n    identifier: \"implementacion\",\n    question:\n      \"Se crea el diseño detallado de los módulos y unidades, se revisa el diseño, se convierte el diseño al código, se inspecciona el código, se compilan y prueban los módulos y unidades, se analiza la calidad de los módulos/unidades.\",\n    answer: \"TSP - Implementacion\"\n  },\n  {\n    identifier: \"pruebas\",\n    question:\n      \"Se construye e integra el sistema, se llevan a cabo las pruebas del sistema, se produce la documentación de usuario.\",\n    answer: \"TSP - Pruebas\"\n  },\n  {\n    identifier: \"postmortem\",\n    question:\n      \"Análisis de resultados, se escribe el reporte del ciclo, se produce producen evaluaciones de pares y equipo, evaluaciones del plan de calidad. Esta es una fase en la que se puede decir que se generan las lecciones aprendidas del proyecto\",\n    answer: \"TSP - Postmortem\"\n  }\n];\n","export const shuffle = a => {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}